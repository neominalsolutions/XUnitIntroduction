trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  coverageThreshold: 70

steps:
  # 1️⃣ Kodun alınması
  - task: Checkout@1

  # 2️⃣ .NET SDK kurulumu
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  # 3️⃣ Restore
  - script: dotnet restore
    displayName: 'Restore dependencies'

  # 4️⃣ Build
  - script: dotnet build --configuration $(buildConfiguration) --no-restore
    displayName: 'Build project'

  # 5️⃣ Test + coverage ölçümü (%70 altı fail)
  - script: |
      dotnet test --no-build --configuration $(buildConfiguration) `
        /p:CollectCoverage=true `
        /p:CoverletOutput=TestResults/Coverage/ `
        /p:CoverletOutputFormat=cobertura `
        /p:Threshold=$(coverageThreshold) `
        /p:ThresholdType=line `
        /p:ThresholdStat=average `
        --logger "trx;LogFileName=test_results.trx"
    displayName: 'Run tests with coverage check'

  # 6️⃣ Coverage raporu oluşturma (HTML)
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:**/coverage.cobertura.xml -targetdir:$(Build.ArtifactStagingDirectory)/coverage-report -reporttypes:Html
    displayName: 'Generate coverage report'

  # 7️⃣ Test sonuçlarını yayınlama (Azure Test Runs)
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test_results.trx'
      testRunTitle: 'Unit Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true
    condition: succeededOrFailed()
    displayName: 'Publish test results'

  # 8️⃣ Coverage raporunu artifact olarak yayınla
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)/coverage-report'
      artifactName: 'coverage-report'
      publishLocation: 'Container'
    condition: succeededOrFailed()
    displayName: 'Publish coverage report'
